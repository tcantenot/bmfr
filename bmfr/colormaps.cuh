#pragma once

#include "math.cuh"

// Taken from: https://www.shadertoy.com/view/WlfXRN  

inline __device__ vec3 Viridis(float t)
{
	const vec3 c0 = vec3(+0.2777273272234177, +0.005407344544966578, +0.33409980533530610);
	const vec3 c1 = vec3(+0.1050930431085774, +1.404613529898575000, +1.38459016259468500);
	const vec3 c2 = vec3(-0.3308618287255563, +0.214847559468213000, +0.09509516302823659);
	const vec3 c3 = vec3(-4.6342304989834860, -5.799100973351585000, -19.3324409562798700);
	const vec3 c4 = vec3(+6.2282699363470810, +14.17993336680509000, +56.6905526006810500);
	const vec3 c5 = vec3(+4.7763849976702880, -13.74514537774601000, -65.3530326333723400);
	const vec3 c6 = vec3(-5.4354558559346310, +4.645852612178535000, +26.3124352495832000);

	return c0 + t * (c1 + t * (c2 + t * (c3 + t * (c4 + t * (c5 + t * c6)))));
}

inline __device__ vec3 plasma(float t)
{
	const vec3 c0 = vec3(+0.05873234392399702, +0.02333670892565664, +0.5433401826748754);
	const vec3 c1 = vec3(+2.17651463419595800, +0.23838341712601820, +0.7539604599784036);
	const vec3 c2 = vec3(-2.68946047645803400, -7.45585113573890900, +3.1107999397170860);
	const vec3 c3 = vec3(+6.13034834589360300, +42.3461881477227000, -28.518854653321580);
	const vec3 c4 = vec3(-11.1074361906227100, -82.6663110942804500, +60.139847674182630);
	const vec3 c5 = vec3(+10.0230655764706500, +71.4136177009534900, -54.072186555600670);
	const vec3 c6 = vec3(-3.65871384277778800, -22.9315346546114900, +18.191907785398280);

	return c0 + t * (c1 + t * (c2 + t * (c3 + t * (c4 + t * (c5 + t * c6)))));
}

inline __device__ vec3 Magma(float t)
{
	const vec3 c0 = vec3(-0.002136485053939582, -0.000749655052795221, -0.005386127855323933);
	const vec3 c1 = vec3(+0.251660540737164200, +0.677523243683766800, +2.494026599312351000);
	const vec3 c2 = vec3(+8.353717279216625000, -3.577719514958484000, +0.314467903013257300);
	const vec3 c3 = vec3(-27.66873308576866000, +14.26473078096533000, -13.64921318813922000);
	const vec3 c4 = vec3(+52.17613981234068000, -27.94360607168351000, +12.94416944238394000);
	const vec3 c5 = vec3(-50.76852536473588000, +29.04658282127291000, +4.234152993845980000);
	const vec3 c6 = vec3(+18.65570506591883000, -11.48977351997711000, -5.601961508734096000);

	return c0 + t * (c1 + t * (c2 + t * (c3 + t * (c4 + t * (c5 + t * c6)))));
}

inline __device__ vec3 Inferno(float t)
{
	const vec3 c0 = vec3(+0.0002189403691192265, +0.001651004631001012, -0.01948089843709184);
	const vec3 c1 = vec3(+0.1065134194856116000, +0.563956436788409100, +3.93271238888927700);
	const vec3 c2 = vec3(+11.602493082471870000, -3.972853965665698000, -15.9423941062914000);
	const vec3 c3 = vec3(-41.703996131394590000, +17.43639888205313000, +44.3541451987281300);
	const vec3 c4 = vec3(+77.162935699427000000, -33.40235894210092000, -81.8073092573899300);
	const vec3 c5 = vec3(-71.319428244992140000, +32.62606426397723000, +73.2095198580320200);
	const vec3 c6 = vec3(+25.131126224773410000, -12.24266895238567000, -23.0703250028717200);

	return c0 + t * (c1 + t * (c2 + t * (c3 + t * (c4 + t * (c5 + t * c6)))));
}